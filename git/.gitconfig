[include]
  path = .gitconfig_public
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
[user]
  useConfigOnly = true
[difftool]
  prompt = false
[core]
  excludesfile = ~/dotfiles/git/.gitignore_global
[alias]
  # shortcuts
  amend = commit --amend -C HEAD
  branches = branch -vv --sort=committerdate
  cleanup = !sh -c 'git remote | xargs -n 1 git remote prune && git branch --merged | grep -v \"*\" | xargs -n 1 git branch -d'
  co = checkout
  cob = checkout -b
  credit = commit --amend --author "$1 <$2>" -C HEAD
  deploy = push deploy HEAD
  fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
  gr = grep --heading -n --break
  publish = push -u origin HEAD
  ri = rebase --interactive --autosquash
  squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
  undo = reset --soft HEAD^
  wayback = !sh -c 'git checkout `git rev-list -n 1 --before="$1" HEAD`'

  # list files which have changed since REVIEW_BASE
  # (REVIEW_BASE defaults to 'develop' in my bashrc)
  files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")

  # Same as above, but with a diff stat instead of just names
  # (better for interactive use)
  stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")

  # logging
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

  # scripts
  ff = "!git checkout --quiet --detach; \
    git fetch origin master:master; \
    git fetch origin develop:develop; \
    git checkout --quiet -"
  # don't reset without first committing, just in case...
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  #branches = !~/.dotfiles/git/git-describe-branches.pl
  #add-desc = !~/.dotfiles/git/git-add-description.sh
  #context = !~/.dotfiles/git/git-context.sh
[color "grep"]
  match = cyan
  filename = white bold
  linenumber = yellow
  separator = white
[core]
  editor = gvim
  autocrlf = false
[merge]
  ff = only
[status]
  short = true
  branch = true
[help]
  autocorrect = 1
[rerere]
  enabled = 1
[push]
  # push current branch to branch of same name on remote
  default = current
[gui]
  tabsize = 4
  commitmsgwidth = 120
[pull]
  rebase = true
[rebase]
  autoStash = true
